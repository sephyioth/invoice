package com.genesis.ginvoice.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.genesis.ginvoice.db.Card;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD".
*/
public class CardDao extends AbstractDao<Card, Long> {

    public static final String TABLENAME = "CARD";

    /**
     * Properties of entity Card.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Num = new Property(1, Integer.class, "num", false, "NUM");
        public final static Property Price = new Property(2, Float.class, "price", false, "PRICE");
        public final static Property Introduction = new Property(3, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Doc_path = new Property(5, String.class, "doc_path", false, "DOC_PATH");
    };


    public CardDao(DaoConfig config) {
        super(config);
    }
    
    public CardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NUM\" INTEGER," + // 1: num
                "\"PRICE\" REAL," + // 2: price
                "\"INTRODUCTION\" TEXT," + // 3: introduction
                "\"TIME\" TEXT," + // 4: time
                "\"DOC_PATH\" TEXT);"); // 5: doc_path
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Card entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer num = entity.getNum();
        if (num != null) {
            stmt.bindLong(2, num);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(3, price);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(4, introduction);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String doc_path = entity.getDoc_path();
        if (doc_path != null) {
            stmt.bindString(6, doc_path);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Card readEntity(Cursor cursor, int offset) {
        Card entity = new Card( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // num
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // introduction
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // doc_path
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Card entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNum(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setIntroduction(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDoc_path(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Card entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Card entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
